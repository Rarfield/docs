"use strict";(self.webpackChunkwrapidly_docs=self.webpackChunkwrapidly_docs||[]).push([[3975],{8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>a});var r=s(6540);const i={},o=r.createContext(i);function t(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(o.Provider,{value:n},e.children)}},8978:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>t,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"Features/command-remap","title":"Command Remap","description":"Wrapidly lets you remap console commands that you type during server runtime.","source":"@site/docs/Features/command-remap.md","sourceDirName":"Features","slug":"/Features/command-remap","permalink":"/docs/Features/command-remap","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"docsSidebar","previous":{"title":"Pre-Startup Check","permalink":"/docs/Features/prestartup-check"},"next":{"title":"Macros","permalink":"/docs/Features/macros"}}');var i=s(4848),o=s(8453);const t={sidebar_position:3},a="Command Remap",c={},d=[{value:"Example",id:"example",level:2},{value:"How it works",id:"how-it-works",level:2},{value:"Notes",id:"notes",level:2}];function l(e){const n={br:"br",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"command-remap",children:"Command Remap"})}),"\n",(0,i.jsxs)(n.p,{children:["Wrapidly lets you remap console commands that you type during server runtime.",(0,i.jsx)(n.br,{}),"\n","This is useful for replacing, aliasing, or even blocking certain commands."]}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"remap:\n  stop: end\n  restart: stop\n  crash: say This command is blocked.\n"})}),"\n",(0,i.jsx)(n.h2,{id:"how-it-works",children:"How it works"}),"\n",(0,i.jsx)(n.p,{children:"When you type a command into the Wrapidly console:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Wrapidly checks if the exact command matches a key in the ",(0,i.jsx)(n.code,{children:"remap:"})," block"]}),"\n",(0,i.jsx)(n.li,{children:"If it matches, the mapped value is sent to the Minecraft server instead"}),"\n",(0,i.jsx)(n.li,{children:"If not, the original command is sent as-is"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"So in the example above:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Typing ",(0,i.jsx)(n.code,{children:"stop"})," will actually send ",(0,i.jsx)(n.code,{children:"end"})]}),"\n",(0,i.jsxs)(n.li,{children:["Typing ",(0,i.jsx)(n.code,{children:"restart"})," will send ",(0,i.jsx)(n.code,{children:"stop"}),", which then sends ",(0,i.jsx)(n.code,{children:"end"})]}),"\n",(0,i.jsxs)(n.li,{children:["Typing ",(0,i.jsx)(n.code,{children:"crash"})," will print a message instead of running a real server command"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["You can chain remaps like ",(0,i.jsx)(n.code,{children:"restart \u2192 stop \u2192 end"}),", but make sure you don't create infinite loops."]}),"\n",(0,i.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Only one-level remapping is supported (Wrapidly does not resolve remaps recursively)"}),"\n",(0,i.jsxs)(n.li,{children:["Commands are matched ",(0,i.jsx)(n.em,{children:"exactly"}),", so ",(0,i.jsx)(n.code,{children:"say hi"})," won't match ",(0,i.jsx)(n.code,{children:"say"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This feature is handy for blocking troll commands, replacing common typos, or adding shorthand to your server."})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);